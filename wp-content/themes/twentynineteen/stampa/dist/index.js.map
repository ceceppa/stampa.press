{"version":3,"sources":["components/StampaMediaUpload.js","components/stampa-components.js","blocks/m01-hero.js","blocks/all-blocks.js","index.js"],"names":["__","wp","i18n","MediaUpload","editor","IconButton","components","StampaMediaUpload","fieldName","image","attributes","updateAttribute","object_fit","object_position","replace","customClass","url","id","open","focusedField","useCallback","window","React","registerBlockType","blocks","InspectorControls","PanelBody","PanelRow","SelectControl","ToggleControl","TextControl","element","Fragment","Component","allFieldsOptions","heading","name","type","label","values","value","text","button","stampa","fieldOptionsComponents","select","checkbox","title","icon","category","keywords","multiple","backgroundImage","heading__level","default","heading__placeholder","text__placeholder","button__link","edit","props","className","setAttributes","fieldOptions","field","attribute","updateFocusedField","__focused","map","option","attributeKey","display","gridTemplateColumns","gridTemplateRows","gridGap","height","gridRowStart","gridColumnStart","gridRowEnd","gridColumnEnd","e","target","save","container","image1","image__fit","image__position","image1__fit","image1__position"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["const { __ } = wp.i18n;\nconst { MediaUpload } = wp.editor;\nconst { IconButton } = wp.components;\n\nexport default function StampaMediaUpload({\n  fieldName,\n  image,\n  attributes,\n  updateAttribute,\n}) {\n  const object_fit = attributes[`${fieldName}__fit`];\n  const object_position = attributes[`${fieldName}__position`].replace(\n    ' ',\n    '-'\n  );\n\n  let customClass = image && image.url ? 'has-image' : 'wireframe';\n  customClass += ` object-fit--${object_fit} object-position--${object_position}`;\n\n  return (\n    <div className=\"stampa-media-upload\">\n      <img\n        className={`stampa-field__image ${customClass}`}\n        src={image && image.url}\n      />\n      {image == null &&\n        <svg\n          className=\"image-wireframe\"\n          viewBox=\"0 0 24 24\"\n          xmlns=\"http://www.w3.org/2000/svg\"\n          role=\"img\"\n          aria-hidden=\"true\"\n          focusable=\"false\"\n        >\n          <path d=\"M0,0h24v24H0V0z\" fill=\"none\" />\n          <path d=\"m19 5v14h-14v-14h14m0-2h-14c-1.1 0-2 0.9-2 2v14c0 1.1 0.9 2 2 2h14c1.1 0 2-0.9 2-2v-14c0-1.1-0.9-2-2-2z\" />\n          <path d=\"m14.14 11.86l-3 3.87-2.14-2.59-3 3.86h12l-3.86-5.14z\" />\n        </svg>}\n      <MediaUpload\n        className=\"media-upload\"\n        value={image}\n        placeholder=\"{{stampa.value.placeholder}}\"\n        onSelect={image =>\n          updateAttribute(fieldName, { url: image.url, id: image.id })}\n        render={({ open }) => (\n          <IconButton\n            className={`button add ${image && image.url ? 'round' : ''}`}\n            label={__('Media')}\n            icon=\"format-image\"\n            onClick={open}\n          >\n            <span>Select image</span>\n          </IconButton>\n        )}\n      />\n      {image &&\n        <IconButton\n          className=\"button round remove\"\n          label={__('Remove')}\n          icon=\"no\"\n          onClick={() => updateAttribute(fieldName, null)}\n        >\n          <span>Remove Image</span>\n        </IconButton>}\n    </div>\n  );\n}\n","import StampaMediaUpload from './StampaMediaUpload';\n\nexport { StampaMediaUpload };\n","/**\n * BLOCK: M01 - Hero\n *\n */\n// Stampa Components\nimport { StampaMediaUpload } from \"../components/stampa-components\";\n\nconst useCallback = window.React.useCallback;\nconst { __ } = wp.i18n;\nconst { registerBlockType } = wp.blocks;\nconst { InspectorControls, MediaUpload } = wp.editor;\nconst {\n  PanelBody,\n  PanelRow,\n  SelectControl,\n  ToggleControl,\n  TextControl,\n  IconButton\n} = wp.components;\nconst { Fragment, Component } = wp.element;\n\nconst allFieldsOptions = {\n  heading: [\n    {\n      name: \"level\",\n      type: \"select\",\n      label: \"Level\",\n      values: [\"h1\", \"h2\", \"h3\", \"h4\", \"h5\", \"h6\"],\n      value: \"h2\"\n    },\n    {\n      name: \"placeholder\",\n      type: \"text\",\n      label: \"Placeholder\",\n      value: \"Heading\"\n    }\n  ],\n  text: [\n    {\n      name: \"placeholder\",\n      type: \"text\",\n      label: \"Placeholder\",\n      value: \"Write text...\"\n    }\n  ],\n  button: [{ name: \"link\", type: \"text\", label: \"URL\", stampa: false }]\n};\nconst fieldOptionsComponents = {\n  select: SelectControl,\n  checkbox: ToggleControl,\n  text: TextControl\n};\nlet focusedField;\n\nregisterBlockType(\"stampa/m01-hero\", {\n  title: __(\"M01 - Hero\"),\n  icon: \"flag\",\n  category: \"stampa-blocks\",\n  keywords: [],\n\n  multiple: true,\n\n  attributes: {\n    backgroundImage: { type: \"string\" },\n    heading: { type: \"string\" },\n    heading__level: { type: \"string\", default: \"h2\" },\n    heading__placeholder: { type: \"string\", default: \"Heading\" },\n    text: { type: \"string\" },\n    text__placeholder: { type: \"string\", default: \"Write text...\" },\n    button: { type: \"string\" },\n    button__link: { type: \"string\", default: \"\" }\n  },\n\n  /**\n   * The edit function describes the structure of your block in the context of the editor.\n   * This represents what the editor will render when the block is used.\n   *\n   * The \"edit\" property must be a valid function.\n   *\n   * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n   *\n   * @param {object} props Gutenberg props.\n   * @return {JSX} JSX block.\n   */\n  edit: function(props) {\n    const { className, attributes = {}, setAttributes } = props;\n    const fieldOptions = allFieldsOptions[focusedField];\n\n    const updateAttribute = useCallback((field, value) => {\n      const attribute = {};\n      attribute[field] = value;\n\n      setAttributes(attribute);\n    });\n\n    const updateFocusedField = useCallback(fieldName => {\n      focusedField = fieldName;\n\n      // We don't need this data to be saved by Gutenberg\n      // but we want to trigger a re-render when focusedField changes.\n      setAttributes({ __focused: fieldName });\n    });\n\n    return (\n      <Fragment>\n        <InspectorControls>\n          <PanelBody title={__(\"Options\")}>\n            <MediaUpload\n              onSelect={image => updateAttribute(\"backgroundImage\", image.url)}\n              type=\"image\"\n              value={attributes.backgroundImage}\n              render={({ open }) => (\n                <IconButton\n                  className=\"button\"\n                  label={__(\"Set background Image\")}\n                  icon=\"edit\"\n                  onClick={open}\n                >\n                  Set background Image\n                </IconButton>\n              )}\n            />\n          </PanelBody>\n          {fieldOptions && (\n            <PanelBody title={__(\"Options\")} className=\"typed-panel-body\">\n              {fieldOptions.map(option => {\n                const Component = fieldOptionsComponents[option.type];\n                const attributeKey = `${focusedField}__${option.name}`;\n                const values = option.values || [];\n\n                return (\n                  <PanelRow key={option.name}>\n                    <Component\n                      label={option.label}\n                      value={attributes[attributeKey]}\n                      options={\n                        values.map &&\n                        values.map(value => {\n                          return {\n                            label: value,\n                            value\n                          };\n                        })\n                      }\n                      onChange={value => updateAttribute(attributeKey, value)}\n                    />\n                  </PanelRow>\n                );\n              })}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        <div className={`${className} stampa-block m01d full-width`}>\n          <div\n            className=\"m01-hero\"\n            style={{\n              backgroundImage: `url(${attributes.backgroundImage})`,\n              display: \"grid\",\n              gridTemplateColumns:\n                \"1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr \",\n              gridTemplateRows: \"1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr \",\n              gridGap: \"5px\",\n              height: \"414px\"\n            }}\n          >\n            {/* heading */}\n            <div\n              className={`stampa-field stampa-field--heading field--heading ${\n                focusedField == \"heading\" ? \"focused\" : \"\"\n              }`}\n              style={{\n                gridRowStart: 2,\n                gridColumnStart: 2,\n                gridRowEnd: 5,\n                gridColumnEnd: 9\n              }}\n              onClick={() => updateFocusedField(\"heading\")}\n            >\n              <h2>\n                {\" \"}\n                <textarea\n                  type=\"text\"\n                  value={attributes.heading}\n                  placeholder=\"Heading\"\n                  onChange={e => updateAttribute(\"heading\", e.target.value)}\n                />{\" \"}\n              </h2>\n            </div>\n            {/* text */}\n            <div\n              className={`stampa-field stampa-field--text field--text ${\n                focusedField == \"text\" ? \"focused\" : \"\"\n              }`}\n              style={{\n                gridRowStart: 5,\n                gridColumnStart: 2,\n                gridRowEnd: 7,\n                gridColumnEnd: 7\n              }}\n              onClick={() => updateFocusedField(\"text\")}\n            >\n              <textarea\n                value={attributes.text}\n                placeholder=\"Write text...\"\n                onChange={e => updateAttribute(\"text\", e.target.value)}\n              />\n            </div>\n            {/* button */}\n            <div\n              className={`stampa-field stampa-field--button field--button ${\n                focusedField == \"button\" ? \"focused\" : \"\"\n              }`}\n              style={{\n                gridRowStart: 8,\n                gridColumnStart: 2,\n                gridRowEnd: 9,\n                gridColumnEnd: 5\n              }}\n              onClick={() => updateFocusedField(\"button\")}\n            >\n              <textarea\n                className=\"button m01d__button\"\n                value={attributes.button}\n                placeholder=\"LEARN MORE\"\n                onChange={e => updateAttribute(\"button\", e.target.value)}\n              />\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  },\n\n  /**\n   * Let the content to be rendered with PHP\n   */\n  save: () => null\n});\n","/**\n * BLOCK: All blocks\n *\n */\n// Stampa Components\nimport { StampaMediaUpload } from \"../components/stampa-components\";\n\nconst useCallback = window.React.useCallback;\nconst { __ } = wp.i18n;\nconst { registerBlockType } = wp.blocks;\nconst { InspectorControls, MediaUpload } = wp.editor;\nconst {\n  PanelBody,\n  PanelRow,\n  SelectControl,\n  ToggleControl,\n  TextControl,\n  IconButton\n} = wp.components;\nconst { Fragment, Component } = wp.element;\n\nconst allFieldsOptions = {\n  image: [\n    {\n      name: \"fit\",\n      type: \"select\",\n      label: 'Default value for \"object-fit\"',\n      values: [\"fill\", \"contain\", \"cover\", \"none\", \"scale-down\"],\n      value: \"fill\"\n    },\n    {\n      name: \"position\",\n      type: \"select\",\n      label: 'Default value for \"object-position\"',\n      values: [\n        \"initial\",\n        \"left top\",\n        \"left center\",\n        \"left bottom\",\n        \"center center\",\n        \"right top\",\n        \"right center\",\n        \"right bottom\"\n      ],\n      value: \"initial\"\n    }\n  ],\n  container: [],\n  image1: [\n    {\n      name: \"fit\",\n      type: \"select\",\n      label: 'Default value for \"object-fit\"',\n      values: [\"fill\", \"contain\", \"cover\", \"none\", \"scale-down\"],\n      value: \"fill\"\n    },\n    {\n      name: \"position\",\n      type: \"select\",\n      label: 'Default value for \"object-position\"',\n      values: [\n        \"initial\",\n        \"left top\",\n        \"left center\",\n        \"left bottom\",\n        \"center center\",\n        \"right top\",\n        \"right center\",\n        \"right bottom\"\n      ],\n      value: \"initial\"\n    }\n  ]\n};\nconst fieldOptionsComponents = {\n  select: SelectControl,\n  checkbox: ToggleControl,\n  text: TextControl\n};\nlet focusedField;\n\nregisterBlockType(\"stampa/all-blocks\", {\n  title: __(\"All blocks\"),\n  icon: \"lightbulb\",\n  category: \"stampa-blocks\",\n  keywords: [],\n\n  multiple: true,\n\n  attributes: {\n    backgroundImage: { type: \"string\" },\n    image: { type: \"object\" },\n    image__fit: { type: \"string\", default: \"fill\" },\n    image__position: { type: \"string\", default: \"initial\" },\n    image1: { type: \"object\" },\n    image1__fit: { type: \"string\", default: \"cover\" },\n    image1__position: { type: \"string\", default: \"center center\" }\n  },\n\n  /**\n   * The edit function describes the structure of your block in the context of the editor.\n   * This represents what the editor will render when the block is used.\n   *\n   * The \"edit\" property must be a valid function.\n   *\n   * @link https://wordpress.org/gutenberg/handbook/block-api/block-edit-save/\n   *\n   * @param {object} props Gutenberg props.\n   * @return {JSX} JSX block.\n   */\n  edit: function(props) {\n    const { className, attributes = {}, setAttributes } = props;\n    const fieldOptions = allFieldsOptions[focusedField];\n\n    const updateAttribute = useCallback((field, value) => {\n      const attribute = {};\n      attribute[field] = value;\n\n      setAttributes(attribute);\n    });\n\n    const updateFocusedField = useCallback(fieldName => {\n      focusedField = fieldName;\n\n      // We don't need this data to be saved by Gutenberg\n      // but we want to trigger a re-render when focusedField changes.\n      setAttributes({ __focused: fieldName });\n    });\n\n    return (\n      <Fragment>\n        <InspectorControls>\n          <PanelBody title={__(\"Options\")}>\n            <MediaUpload\n              onSelect={image => updateAttribute(\"backgroundImage\", image.url)}\n              type=\"image\"\n              value={attributes.backgroundImage}\n              render={({ open }) => (\n                <IconButton\n                  className=\"button\"\n                  label={__(\"Set background Image\")}\n                  icon=\"edit\"\n                  onClick={open}\n                >\n                  Set background Image\n                </IconButton>\n              )}\n            />\n          </PanelBody>\n          {fieldOptions && (\n            <PanelBody title={__(\"Options\")} className=\"typed-panel-body\">\n              {fieldOptions.map(option => {\n                const Component = fieldOptionsComponents[option.type];\n                const attributeKey = `${focusedField}__${option.name}`;\n                const values = option.values || [];\n\n                return (\n                  <PanelRow key={option.name}>\n                    <Component\n                      label={option.label}\n                      value={attributes[attributeKey]}\n                      options={\n                        values.map &&\n                        values.map(value => {\n                          return {\n                            label: value,\n                            value\n                          };\n                        })\n                      }\n                      onChange={value => updateAttribute(attributeKey, value)}\n                    />\n                  </PanelRow>\n                );\n              })}\n            </PanelBody>\n          )}\n        </InspectorControls>\n        <div className={`${className} stampa-block all-blocks full-width`}>\n          <div\n            className=\"all-blocks\"\n            style={{\n              backgroundImage: `url(${attributes.backgroundImage})`,\n              display: \"grid\",\n              gridTemplateColumns:\n                \"1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr 1fr \",\n              gridTemplateRows: \"1fr 1fr 1fr 1fr 1fr \",\n              gridGap: \"5px\",\n              height: \"230px\"\n            }}\n          >\n            {/* image */}\n            <div\n              className={`stampa-field stampa-field--image field--image ${\n                focusedField == \"image\" ? \"focused\" : \"\"\n              }`}\n              style={{\n                gridRowStart: 1,\n                gridColumnStart: 1,\n                gridRowEnd: 6,\n                gridColumnEnd: 6\n              }}\n              onClick={() => updateFocusedField(\"image\")}\n            >\n              <StampaMediaUpload\n                fieldName=\"image\"\n                image={attributes.image}\n                customClass=\"\"\n                attributes={attributes}\n                updateAttribute={updateAttribute}\n              />\n            </div>\n            {/* container */}\n            <div\n              className={`stampa-field stampa-field--container field--container ${\n                focusedField == \"container\" ? \"focused\" : \"\"\n              }`}\n              style={{\n                gridRowStart: 1,\n                gridColumnStart: 1,\n                gridRowEnd: 4,\n                gridColumnEnd: 4\n              }}\n              onClick={() => updateFocusedField(\"container\")}\n            ></div>\n            {/* image1 */}\n            <div\n              className={`stampa-field stampa-field--image field--image1 ${\n                focusedField == \"image1\" ? \"focused\" : \"\"\n              }`}\n              style={{\n                gridRowStart: 1,\n                gridColumnStart: 1,\n                gridRowEnd: 4,\n                gridColumnEnd: 4\n              }}\n              onClick={() => updateFocusedField(\"image1\")}\n            >\n              <StampaMediaUpload\n                fieldName=\"image1\"\n                image={attributes.image1}\n                customClass=\"\"\n                attributes={attributes}\n                updateAttribute={updateAttribute}\n              />\n            </div>\n          </div>\n        </div>\n      </Fragment>\n    );\n  },\n\n  /**\n   * Let the content to be rendered with PHP\n   */\n  save: () => null\n});\n","import './blocks/m01-hero';\nimport './blocks/all-blocks';\n"]}